# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1arXWWuwBVUZV64DTWVJysNCS7oCzi7lA
"""

!pip install fuzzywuzzy[speedup]
import requests

def wget(url):
    r = requests.get(url, allow_redirects=True)
    with open(url[url.rfind('/') + 1::], 'wb') as f:
        f.write(r.content)

wget ('https://covid.ourworldindata.org/data/ecdc/full_data.csv')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import math
from fuzzywuzzy import fuzz                                                     #Importamos fuzzy para las similitudes en el ingreso de paises

archivo = pd.read_csv('full_data.csv')
archivo.drop(['new_cases','new_deaths','weekly_cases','weekly_deaths','biweekly_cases','biweekly_deaths'], inplace=True, axis=1)
archivo['total_cases'] = archivo.groupby('location')['total_cases'].transform(lambda v: v.ffill())
archivo['total_deaths'] = archivo.groupby('location')['total_deaths'].transform(lambda v: v.ffill())
archivo= archivo.replace(np.nan,0)
datos = archivo.to_dict("index")

paises={}                                                                       #Creamos un diccionario para localizar paises escritos en minuscula
for r in datos:
    if datos[r]['location'] not in paises:
      paises[datos[r]['location'].lower()] = datos[r]['location']

colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']                                    #Creamos una lista de colores 
ls = ['-', '--', '-.', ':']                                                     #y de tipos de linea para diferenciar todos los paises ingresados
info = {'casos':[],'fechas':[],'muertes':[]}                                    #Creamos diccionarios y listas pera guardar los datos
quieres='no'
tipos = ['casos','muertes']

def ingreso():                                                                  #Esta primera funcion recibe el pais desado
  npd = '' #NombrePaisDeseado
  while (npd != 'fin'):
    simil = []
    npd = input('Escriba el pais desado (Escriba "fin" para finalizar con el ingreso): ').lower()
    if npd == 'fin':                                                            #En caso de querer finalizar el ingreso de paises se podra mediante 'fin'
      return
    if npd not in paises:                                                       #Hacemos uso de la libreria fuzzy y buscamos las coincidencias en caso de 
      for pais in paises:                                                       #no encontrar un paises en especifico
        if fuzz.partial_ratio(npd,pais) > 80:
          simil.append(pais)
      if len(simil) > 1:
        print('Perdon, no pudimos encontrar "',npd,'" en nuestra base de datos, quizas puedes intentar con alguna de los siguientes:')
        for pais in simil:
          print(pais)                                                           #Mostramos en pantalla las posibles similitudes
        continue
      elif len(simil) < 1:
        print('Perdon, no pudimos encontrar "',npd,'" en nuestra base de datos, vuelve a intentarlo.')
        continue
      elif len(simil) == 1:
        npd = simil[0]
    if paises[npd] in mispaises:
        print(paises[npd],'ya se encuentra en la lista.') 
    elif npd in paises:                                                         #Agregamos el pais ingresado a nuestra lista
      mispaises.append(paises[npd])
      print('Se agrego', paises[npd])

def fecha():                                                                    #Creamos una funcion para el posible ingreso de un rango de fechas
  while True:
    try:
      ano = int(input('Ingresar año en formato YYYY: '))
      if ano > 0 or ano < 9999:
        break
      else: raise ValueError
    except ValueError:
      print('El año debe ser un numero de 4 digitos')
      continue
  while True:
    try:
      mes = int(input('Ingresar numero de mes: '))
      if mes <= 12 and mes >= 1:
        break
      else: raise ValueError
    except ValueError:
      print('El mes debe ser un numero entre 1 y 12.')
      continue
  while True:
    try:
      dia = int(input('Ingresar dia: '))
      if dia <= 31 and dia >= 1:
        break
      else: raise ValueError
    except ValueError:
      print('El dia debe ser un numero entre 1 y 31.')
      continue
  fecha=str(ano)+'-'+str(mes)+'-'+str(dia)
  return fecha

def quees(date1,date2):                                                         #Con esta funcion compararemos nuestras fechas ingresadas por el usuario con
  date1 = [int(x) for x in date1.split('-')]                                    #las ya existentes en las estadisticas.
  date2 = [int(x) for x in date2.split('-')]
  if date1[0] > date2[0] or (date1[0] == date2[0] and date1[1] > date2[1]) or (date1[0] == date2[0] and date1[1] == date2[1] and date1[2] > date2[2]):
    return 'mayor'
  elif date1[0] == date2[0] and date1[1] == date2[1] and date1[2] == date2[2]:
    return 'igual'
  else:
    return 'menor'

def colectdata(pais):                                                           #Esta funcion ingresa los datos de cada pais
  info['casos'].append([])                                                      #Teniendo en cuenta el rango de fechas ingresadas
  info['fechas'].append([])
  info['muertes'].append([])
  for r in datos:
    if pais == datos[r]['location']:
      if (quieres != 'si') or (quees(datos[r]['date'],datemin)!='menor' and quees(datos[r]['date'],datemax)!='mayor'):
        info['casos'][-1].append(datos[r]['total_cases'])
        info['fechas'][-1].append(datos[r]['date'])
        info['muertes'][-1].append(datos[r]['total_deaths'])
  for r in range(len(info['fechas'][-1])):
    for tipo in tipos:
      if info[tipo][-1][r]=='nan':
        if r==0:
          info[tipo][-1][r]=0
        else:
          info[tipo][-1][r]=info[tipo][-1][r-1]

while True:
  datemin='0-0-0'
  datemax='1-1-1'
  info['casos']=[]                                                              
  info['fechas']=[]
  info['muertes']=[]
  paismax = 0
  mispaises = []
  while len(mispaises)<1:
    ingreso()
    if len(mispaises)<1:
      print('Error: Debes ingresar al menos un pais.')
  print(mispaises)                                                                        #En caso de ingresar de finalizar el ingreso de paises se pregunta al usuario
  quieres = input('Desea ingresar un intervalo de fechas? (Si o No): ').lower()   #si quiere colocar un rango de fechas.
  if quieres == 'si':                                                           #En caso de que si,  se almacenara las fechas requeridas.
    while True:   
      print('ingresear fecha minima')
      datemin = fecha()                                               
      print('ingresear fecha maxima')
      datemax = fecha()
      if quees(datemin,datemax) != 'menor':
        print('La fecha minima no es menor a la maxima, vuelve a intentar')
      else: break

  for idpais in range(len(mispaises)):                                               #Revisamos cual de los paises ingresados es el que usaremos como guia
    colectdata(mispaises[idpais])                                                    #y lo guardamos en una variable
    if len(info['fechas'][idpais]) > len(info['fechas'][paismax]):
      paismax = idpais
  cantidad = len(info['fechas'][paismax])
  if cantidad<1:
    print('No se encontraron datos para esas fechas, vuelve a intentar')
    continue

  for tipo in tipos:
    for idpais in range(len(mispaises)): 
      for n in range(len(info[tipo][paismax])-len(info[tipo][idpais])):
        info[tipo][idpais].insert(0,0)
    Yidem=[]
    Xidem=[]
    print(tipo,'detectados en', mispaises)
    plt.figure(figsize=(15,6))
    for idpais in range(len(mispaises)):
      if len(mispaises) > 2:
        for f in range(len(info[tipo][idpais])):
          if info[tipo][idpais][f]>0:
            info[tipo][idpais][f] = math.log(info[tipo][idpais][f])
      plt.plot(info[tipo][idpais], color=colors[idpais%7],ls=ls[math.floor(idpais/7)%4],label=mispaises[idpais])
    if len(mispaises) == 2:
      for n in range(1,len(info[tipo][paismax])):
        ya1 = info[tipo][0][n]
        ya2 = info[tipo][0][n-1]
        yb1 = info[tipo][1][n]
        yb2 = info[tipo][1][n-1]
        if ((ya1 > yb1 and ya2 <= yb2) or (ya1 < yb1 and ya2 >= yb2)):
          Xidem.append(n-((ya1-yb1) / (ya1-ya2-yb1+yb2)))
          Yidem.append(((((-ya1)*(yb1-yb2)-(ya1-ya2)*(-yb1)) / (ya1-ya2-yb1+yb2))))
      plt.plot(Xidem,Yidem, 'ro', ms=10,mfc='none')
    plt.legend()
    plt.ticklabel_format(axis="y", style="plain")
    if cantidad <= 15:
      plt.xticks(ticks=range(0,cantidad),labels=info['fechas'][paismax],rotation=45)
    else:
      plt.xticks(ticks=list(range(0,cantidad,round(cantidad/15))),labels=info['fechas'][paismax][::round(cantidad/15)],rotation=45)
    plt.grid()
    quieres = 'no'
    quieres = input('Desea guadar la imagen? ("Si" o "No"): ').lower()
    if quieres == 'si':
      nombre = input('Con que nombre desea guardarla?: ')
      nombre = nombre + '.png'
      plt.savefig(nombre)
    plt.show()

  quieres = 'no'
  quieres = input('Ingrese "Si" para volver a empezar de nuevo: ').lower()
  if quieres == 'si':
    print('Volviendo a iniciar...\n\n\n\n')
    continue
  else:
    break
quieres = input('Desea guardar un excel con los paises y sus datos del dia de hoy? (Si o no): ')
if quieres == 'si':
  data=[['Pais','Casos','Muertes']]
  quieres='no'
  for pai in paises:
    info['casos']=[]                                                              
    info['fechas']=[]
    info['muertes']=[]
    colectdata(paises[pai])
    aux=[paises[pai],info['casos'][0][-1],info['muertes'][0][-1]]
    data.append(aux)
  UltimosDatos = pd.DataFrame(data[1:],columns=data[0]).set_index('Pais')
  UltimosDatos = UltimosDatos.sort_values(by='Casos', ascending=False)
  print(UltimosDatos)
  UltimosDatos.to_excel("UltimosDatos.xlsx")

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import math
from fuzzywuzzy import fuzz                                                     #Importamos fuzzy para las similitudes en el ingreso de paises

archivo = pd.read_csv('full_data.csv')
archivo.drop(['new_cases','new_deaths','weekly_cases','weekly_deaths','biweekly_cases','biweekly_deaths'], inplace=True, axis=1)
archivo['total_cases'] = archivo.groupby('location')['total_cases'].transform(lambda v: v.ffill())
archivo['total_deaths'] = archivo.groupby('location')['total_deaths'].transform(lambda v: v.ffill())
archivo= archivo.replace(np.nan,0)
datos = archivo.to_dict("index")

paises={}                                                                       #Creamos un diccionario para localizar paises escritos en minuscula
for r in datos:
    if datos[r]['location'] not in paises:
      paises[datos[r]['location'].lower()] = datos[r]['location']

colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']                                    #Creamos una lista de colores 
ls = ['-', '--', '-.', ':']                                                     #y de tipos de linea para diferenciar todos los paises ingresados
info = {'casos':[],'fechas':[],'muertes':[]}                                    #Creamos diccionarios y listas pera guardar los datos
quieres='no'
tipos = ['casos','muertes']


def quees(date1,date2):                                                         #Con esta funcion compararemos nuestras fechas ingresadas por el usuario con
  date1 = [int(x) for x in date1.split('-')]                                    #las ya existentes en las estadisticas.
  date2 = [int(x) for x in date2.split('-')]
  if date1[0] > date2[0] or (date1[0] == date2[0] and date1[1] > date2[1]) or (date1[0] == date2[0] and date1[1] == date2[1] and date1[2] > date2[2]):
    return 'mayor'
  elif date1[0] == date2[0] and date1[1] == date2[1] and date1[2] == date2[2]:
    return 'igual'
  else:
    return 'menor'

def colectdata(pais):                                                           #Esta funcion ingresa los datos de cada pais
  info['casos'].append([])                                                      #Teniendo en cuenta el rango de fechas ingresadas
  info['fechas'].append([])
  info['muertes'].append([])
  for r in datos:
    if pais == datos[r]['location']:
      if (quieres == 'no') or (quees(datos[r]['date'],datemin)!='menor' and quees(datos[r]['date'],datemax)!='mayor'):
        info['casos'][-1].append(datos[r]['total_cases'])
        info['fechas'][-1].append(datos[r]['date'])
        info['muertes'][-1].append(datos[r]['total_deaths'])
  for r in range(len(info['fechas'][-1])):
    for tipo in tipos:
      if info[tipo][-1][r]=='nan':
        if r==0:
          info[tipo][-1][r]=0
        else:
          info[tipo][-1][r]=info[tipo][-1][r-1]  
  
data=[['Pais','Casos','Muertes']]

for pais in paises:
    info['casos']=[]                                                              
    info['fechas']=[]
    info['muertes']=[]
    colectdata(paises[pais])
    aux=[paises[pais],info['casos'][0][-1],info['muertes'][0][-1]]
    data.append(aux)
UltimosDatos = pd.DataFrame(data[1:],columns=data[0]).set_index('Pais')
UltimosDatos = UltimosDatos.sort_values(by='Casos', ascending=False)
print(UltimosDatos)
UltimosDatos.to_excel("UltimosDatos.xlsx")